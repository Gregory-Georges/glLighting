#version 400
precision highp float;






//Light values
float ambiantLight;
float diffuseLight;
//float specularLight;
float lightValue;
uniform vec3 lightPos;
in vec3 vNormal;



//Variables from vertex
in vec2 vTexPos;                            //Position in the texture on the shape
in vec3 vWorldPos;                          //Position of the fragment in the world



//Color uniforms
uniform vec4 lightColor;                    //Color of the light



//Texture
uniform sampler2D tex;                      //Bound 2D texture



//Output color
out vec4 outColors;                         //Output color





void main()
{
    //Calculate light values
    ambiantLight = 0.2;

    vec3 lightDir = normalize(lightPos - vWorldPos);
    diffuseLight = max(dot(lightDir, vNormal), 0.0);

    //Calculate final light value
    lightValue = ambiantLight + diffuseLight;



    //Output color
    outColors = texture(tex, vTexPos) * (lightColor * lightValue);
}
